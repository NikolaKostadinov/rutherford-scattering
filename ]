#include "../include/RutherfordArgumentParser.hh"

#include "../include/RutherfordDefaults.h"

#include "../include/RutherfordArgument.hh"
#include "../include/RutherfordCommands.h"
#include <vector>

void RutherfordArgumentParser(G4UImanager* uiManager, int argc, char** argv)
{
	/*
	std::vector<RutherfordArgument> definedArgs;
	definedArgs.push_back(RutherfordArgument("--macro",       "-m", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--output",      "-o", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--atomic-n",    "-Z", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--n-density",   "-a", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--thickness",   "-z", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--energy",      "-e", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--distance",    "-d", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--energy-min",  "-i", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--energy-max",  "-u", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--energy-bins", "-b", NO_CMD));
	definedArgs.push_back(RutherfordArgument("--n-events",    "-n", NO_CMD));
	*/

	auto r = RutherfordArgument("--macro", "-m", NO_CMD);

	for (int i = 1; i < argc; ++i)
	{
		std::string arg = argv[i];
		
		if (arg.size() > 1 && arg[0] == '-')
		{
			std::string flag = arg;
			std::string value;

			while (i+1 < argc && argv[i+1][0] != '-')
			{
				if (!value.empty()) value += " ";
				value += argv[++i];
			}

			G4cout << flag << " -> " << value << G4endl;
		}
		
	}
	exit(0);

	/*if (!macro.empty())
	{
		uiManager->ApplyCommand("/control/execute " + macro);
	}
	else
	{
		if (!output.empty())		uiManager->ApplyCommand("/analysis/file "                   + output);
		if (!atomicNumber.empty())	uiManager->ApplyCommand("/geometry/detector/atomicNumber "  + numberDensity);
		if (!numberDensity.empty())	uiManager->ApplyCommand("/geometry/detector/numberDensity " + numberDensity + " 1/cm3");
		if (!thickness.empty())		uiManager->ApplyCommand("/geometry/detector/thickness "     + thickness + " um");
		if (!energy.empty())		uiManager->ApplyCommand("/generate/energy "                 + energy + " MeV");
		if (!distance.empty())		uiManager->ApplyCommand("/generate/distance "               + distance + " cm");
		if (!eMin.empty())		uiManager->ApplyCommand("/analysis/energy/min "             + eMin + " MeV");
		if (!eMax.empty())		uiManager->ApplyCommand("/analysis/energy/max "             + eMax + " MeV");
		if (!nEnergies.empty())		uiManager->ApplyCommand("/analysis/energy/bins "            + nEnergies);

		uiManager->ApplyCommand("/run/initialize");
		if (!nEvents.empty())	uiManager->ApplyCommand("/run/beamOn " + nEvents);
		else			uiManager->ApplyCommand("/run/beamOn " + DEFAULT_NUMBER_OF_EVENTS);
	}*/
}
